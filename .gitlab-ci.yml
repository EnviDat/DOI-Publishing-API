stages:
  - build
  - scan
  - package
  - deploy

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_COMMIT_REF_NAME == "staging"
      when: always
    - if: $CI_COMMIT_REF_NAME == "dev"
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

set-vars:
  stage: .pre
  image: docker.io/alpine:3.15
  script:
    - cat .env >> build.env
    - source build.env
    - echo "APP_NAME=${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}" >> build.env
    - "echo APP_IMAGE=${INTERNAL_REG}/${CI_PROJECT_NAME}:\
      ${APP_VERSION}-${CI_COMMIT_REF_NAME} >> build.env"
    - "echo PROXY_IMAGE=${INTERNAL_REG}/${CI_PROJECT_NAME}/proxy:\
      ${NGINX_IMG_TAG}-${CI_COMMIT_REF_NAME} >> build.env"
    - echo "Printing build.env"
    - cat build.env
    - echo "Loaded the DataCite Url '${DATACITE_API_URL}'"
  artifacts:
    reports:
      dotenv: build.env

.build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.8.1-debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}"
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - echo "Build image  ${IMAGE_NAME}"
    - >
      /kaniko/executor
      --force
      --context "${CONTEXT_DIR}"
      --dockerfile "${CONTEXT_DIR}/Dockerfile"
      --cache=true
      --destination "${IMAGE_NAME}-unverified"
      --build-arg MAINTAINER_APP=${MAINTAINER_APP}
      --build-arg MAINTAINER_DEVOPS=${MAINTAINER_DEVOPS}
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"
      --build-arg INTERNAL_REG="${INTERNAL_REG}"
      --build-arg PYTHON_IMG_TAG="${PYTHON_IMG_TAG}"
      --build-arg APP_VERSION="${APP_VERSION}"
      --build-arg NGINX_IMG_TAG="${NGINX_IMG_TAG}"

app-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: ${APP_IMAGE}
    CONTEXT_DIR: "${CI_PROJECT_DIR}"

proxy-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: ${PROXY_IMAGE}
    CONTEXT_DIR: "${CI_PROJECT_DIR}/nginx"

.scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:0.23.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Create report artifact
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/$SHORT_NAME-imgscan.json"
      "${IMAGE_NAME}-unverified"
    # Print full report
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress "${IMAGE_NAME}"-unverified
    # Fail on critical vulnerabilities
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 1 --ignore-unfixed
      --severity CRITICAL --no-progress "${IMAGE_NAME}"-unverified
  cache:
    key: trivy-cache
    paths:
      - .trivycache/
    policy: pull-push
  artifacts:
    when: always
    reports:
      container_scanning: $SHORT_NAME-imgscan.json

app-scan:
  extends:
    - .scan
  variables:
    IMAGE_NAME: ${APP_IMAGE}
    SHORT_NAME: "app"

proxy-scan:
  extends:
    - .scan
  variables:
    IMAGE_NAME: ${PROXY_IMAGE}
    SHORT_NAME: "proxy"

.retag:
  stage: package
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  rules:
    - changes:  # Image does not need to be rebuilt or tagged in a docker-compose change
        - docker-compose*.yml
        - .gitlab-ci.yml
      when: never
  before_script:
    - export REG_HOST=${INTERNAL_REG%/*}
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
  script:
    - >
      regctl --verbosity debug image copy
      "${IMAGE_NAME}-unverified" "${IMAGE_NAME}"
    - regctl --verbosity debug tag delete "${IMAGE_NAME}-unverified"

app-retag:
  extends:
    - .retag
  variables:
    IMAGE_NAME: ${APP_IMAGE}

proxy-retag:
  extends:
    - .retag
  variables:
    IMAGE_NAME: ${PROXY_IMAGE}

remote-docker:
  stage: deploy
  environment: $CI_COMMIT_REF_NAME
  image: docker.io/docker:24.0
  only:
    - branches
  variables:
    DOCKER_HOST: "ssh://$DEPLOY_SSH_USER@$DEPLOY_HOSTNAME"
  before_script:
    - echo "***The app image is   ${APP_IMAGE}"
    - echo "***The app version is  ${APP_VERSION}"
    - echo "Loaded the DataCite Url '${DATACITE_API_URL}'"
    - echo "With DataCite Client ID '${DATACITE_CLIENT_ID}'"
    - echo "Going to docker compose remote with file docker-compose.$CI_COMMIT_REF_NAME.yml"
    - mkdir -p secret
    - echo "$DB_COPY_ENV" > secret/db-copy.env
    - echo "$RUNTIME_ENV" > secret/runtime.env
    - echo "Adding SSH Key"
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SSH_KEY" > ~/.ssh/gitlab
    - chmod 400 ~/.ssh/gitlab
    - echo 'IdentityFile ~/.ssh/gitlab' > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_HOSTNAME >> ~/.ssh/known_hosts
  script:
    # use docker compose create to recreate the container and force pulling the latest image
    # to avoid using the local cache
    - |
      docker compose --project-name="$APP_NAME" \
        --file "docker-compose.$CI_COMMIT_REF_NAME.yml" \
        create --force-recreate --pull="always"
    # use docker compose up to start the service on the remote machine
    - |
      docker compose --project-name="$APP_NAME" \
        --file "docker-compose.$CI_COMMIT_REF_NAME.yml" \
        up --detach

pages:
  stage: deploy
  image: docker.io/python:3.10
  before_script:
    - wget https://github.com/swagger-api/swagger-ui/archive/refs/tags/v5.4.2.zip
    - unzip v5.4.2.zip
    - cp -r swagger-ui-5.4.2/dist/ public/
  script:
    - pip install pdm>=2.5.6
    - pdm install
    - pdm run python scripts/gen_openapi_json.py
    - mv openapi.json public/
    - sed -i "s|https://petstore.swagger.io/v2/swagger.json|https://envidat.gitlab-pages.wsl.ch/$CI_PROJECT_NAME/openapi.json|g" public/swagger-initializer.js
  artifacts:
    paths:
      - public
# .helm:
#   stage: deploy
#   image:
#     name: docker.io/alpine/helm:3.8.0
#     entrypoint: [""]
#   before_script:
#     - mkdir -p /root/.config/helm/registry
#     - >
#       echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf "%s:%s"
#       "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}" | base64
#       | tr -d '\n')\"}}}" > /root/.config/helm/registry/config.json

# create-helm-chart:
#   extends:
#     - .helm
#   stage: package
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "main"
#       when: always
#   script:
#     - >
#       apk add yq --no-cache
#       --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
#     - helm package chart
#     - CHART_VER=$(yq '.version' chart/Chart.yaml)
#     - helm push "$CI_PROJECT_NAME-${CHART_VER}.tgz" "oci://${INTERNAL_REG}/$CI_PROJECT_NAME"
